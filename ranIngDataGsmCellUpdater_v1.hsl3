#encoding=utf-8
''' 2021-11-03: Start update UMTS cell information on RanIngData table
'''
# ----------------------------------------------------------LIBRARIES----------------------------------------------------------#

# ----------------------------------------------------------VARIABLES----------------------------------------------------------#
bscserverip = '172.16.121.41'
dbuser = 'sitedb'
dbpassword = 'BSCAltice.123'
mccmnc = "01370f01"
# ----------------------------------------------------------FUNCTIONS----------------------------------------------------------#
def ranIngDataGsmCellUpdate(egbtsname, band)
	tmpEgbtsDict = {}
	for x in range(len(egbtsname))
		# Check if key exists in dict. If it's not there, initialize key with empty list as value.
		if egbtsname[x] not in tmpEgbtsDict
			tmpEgbtsDict[egbtsname[x]] = []
			# Append current band (since the key is empty)
			tmpEgbtsDict[egbtsname[x]].append(band[x])
		else
			# If the key exists and the current band is not on the value list, then append
			if band[x] not in tmpEgbtsDict[egbtsname[x]]
				tmpEgbtsDict[egbtsname[x]].append(band[x])
			end
		end
	end
	
	for key in tmpEgbtsDict
		setClause = ""
		gSiteId = key[1:-1]
		neName = "M" + key[1:]
		# Check the key's band list
		if 'GSM850' in tmpEgbtsDict[key] and 'PCS1900' in tmpEgbtsDict[key]
			setClause += "`G850` = 'GSM850', `G1900` = 'PCS1900'"
		end
		if 'GSM850' in tmpEgbtsDict[key] and 'PCS1900' not in tmpEgbtsDict[key]
			setClause += "`G850` = 'GSM850', `G1900` = 'N/A'"
		end
		if 'GSM850' not in tmpEgbtsDict[key] and 'PCS1900' in tmpEgbtsDict[key]
			setClause += "`G850` = 'N/A', `G1900` = 'PCS1900'"
		end
		if 'GSM850' not in tmpEgbtsDict[key] and 'PCS1900' not in tmpEgbtsDict[key]
			setClause += "`G850` = 'N/A', `G1900` = 'N/A'"
		end
		query = "UPDATE raningdata SET " + setClause + " WHERE (`Site` = '" + str(gSiteId) + "') and (`Nodo` = '" + neName + "');"
		# Print query
		Print(StrfTime("%Y%m%d:%H%M%S:") + query)
		# Execute query
		ExecuteCmd(ssh, query)
	end
end
# -----------------------------------------------------------MAINCODE----------------------------------------------------------#
# Open the connection
ssh = OpenSSH(bscserverip, dbuser, dbpassword)
if IsConnected(ssh) == True
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection success')
    # Connect to the DB
    ExecuteCmd(ssh, 'mysql -u ' + dbuser + ' -p' + dbpassword + ' alticedr_sitedb')
    # Get NE list by type
    NEList = GetNELstByType('BSC6910 GSM')
    # Loop through the NE list
    for ne in NEList
        # Check if NE is online before connecting
        if GetNEStatus(ne) == 1
            Print(StrfTime("%Y%m%d:%H%M%S:") + ne + ' is online')
            # Initialize lists (this avoids leftover information from the last loop)
            btsidx = []
            egbtsname = []
            gcellidx = []
            gcellid = []
            gcellname = []
            band = []
            lac = []
            ncc = []
            bcc = []
            rac = []
            hsn = []
            ani = []
			gCellAdmState = []
			gCellActState = []
            # Connect to the NE on loop
            ConnectNE(ne)
            Print(StrfTime("%Y%m%d:%H%M%S:") + 'Connected to ' + ne)
            # List all GCELL information on the BSC
            ClearMMLBuffer()
            @LST GCELL:;
            gcellreport = GetAllMMLReport()
            # Loop through all the output reports of the LST GCELL and append results to the lists
            for report in gcellreport
                gcellreportparse = ParseMMLRpt(report)
                gcellid.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'Local Cell ID'))[1])
                gcellid = gcellid[0]
                gcellidx.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'Cell Index'))[1])
                gcellidx = gcellidx[0]
                gcellname.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'Cell Name'))[1])
                gcellname = gcellname[0]
                egbtsname.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'BTS Name'))[1])
                egbtsname = egbtsname[0]
                btsidx.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'BTS Index'))[1])
                btsidx = btsidx[0]
                lac.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'Cell LAC'))[1])
                lac = lac[0]
                ncc.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'NCC'))[1])
                ncc = ncc[0]
                bcc.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'BCC'))[1])
                bcc = bcc[0]
                band.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'Freq. Band'))[1])
                band = band[0]
				gCellAdmState.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'Administrative State'))[1])
				gCellAdmState = gCellAdmState[0]
				gCellActState.append(Sequence2List(GetColumnByName(gcellreportparse, 0, 'active status'))[1])
				gCellActState = gCellActState[0]
                gbscname = ne
            end
            ClearMMLBuffer()
            # Loop through all GCELLGPRS and GCELLMAGRP to get RAC and HSN
            for i in range(len(gcellidx))
                # Get the RAC for the cell
                SendMML('LST GCELLGPRS:IDTYPE=BYID,CELLID=' + gcellidx[i] + ';')
                racreportparse = ParseMMLRpt(GetMMLReport(0))
                rac.append(GetAttrValueByName(racreportparse, 0, 'Routing Area', 0))
                ClearMMLBuffer()
                # Get the HSN for the cell
                SendMML('LST GCELLMAGRP:IDTYPE=BYID,CELLID=' + gcellidx[i] + ';')
                hsnreportparse = ParseMMLRpt(GetMMLReport(0))
                hsnReportNumber = GetRecordNum(hsnreportparse, 0)
                # Check to see if there's any GCELLMAGRP configured.
                if hsnReportNumber != 0
                    hsn.append(GetAttrValueByName(hsnreportparse, 0, 'HSN', 0))
                else
                    hsn.append('65535')
                end
                ClearMMLBuffer()
                # Get the ANI
                SendMML('LST ADJNODE:LSTTYPE=BYNAME,NAME="' + egbtsname[i] + '";')
                anireportparse = ParseMMLRpt(GetMMLReport(0))
				aniReportNumber = GetRecordNum(anireportparse, 0)
				if aniReportNumber != 0
					ani.append(GetAttrValueByName(anireportparse, 0, 'Adjacent Node ID', 0))
				else
					ani.append('65535')
				end
                ClearMMLBuffer()
                # Find the content between the parenthesis
                glacFindCharStart = ToString(lac[i])[1].find('(') + 1
                glacFindCharEnd = ToString(lac[i])[1].find(')')
                lac[i] = lac[i][glacFindCharStart:glacFindCharEnd]
            end
            # Pass all data to the provisioning function
            Print(StrfTime("%Y%m%d:%H%M%S:") + 'Calling Provisioning Function on ' + ne)
            #gsmCellParaDbUpdate(gcellid, gcellidx, gcellname, egbtsname, btsidx, gbscname, lac, rac, band, ncc, bcc, hsn, ani, mccmnc, gCellAdmState, gCellActState)
			ranIngDataGsmCellUpdate(egbtsname, band)
        # If NE is not connected, then...
        else
            Print(StrfTime("%Y%m%d:%H%M%S:") + ne + " is offline")
        end
    # End initial FOR loop
    end
    # Close the connection. 
    CloseSSH(ssh)
else
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection failed')
end
Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection closed')
Print("Finished!")